type Dao = service {
  createProposal : (ProposalRequest) -> (
      variant { Ok : nat; Err : TransferFromError },
    );
  fetchProposals : () -> (vec Proposal);
  getProposal : (nat32) -> (variant { Ok : Proposal; Err : text });
  vote : (nat, nat32, bool) -> (variant { Ok : nat; Err : TransferFromError });
};
type Proposal = record {
  id : nat32;
  nay : nat;
  yay : nat;
  title : text;
  content : text;
  ends : int;
  createdAt : int;
  createdBy : text;
  isActive : bool;
  proposalType : ProposalType;
  accepted : bool;
};
type ProposalRequest = record {
  title : text;
  content : text;
  ends : int;
  proposalType : ProposalType;
};
type ProposalType = variant { poll };
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
service : Dao