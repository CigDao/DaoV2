type TransferFromError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientAllowance: record {allowance: nat;};
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type ProposalType = variant {poll;};
type ProposalRequest = 
 record {
   content: text;
   ends: int;
   proposalType: ProposalType;
   title: text;
 };
type Proposal = 
 record {
   accepted: bool;
   content: text;
   createdAt: int;
   createdBy: text;
   ends: int;
   id: nat32;
   isActive: bool;
   nay: nat;
   proposalType: ProposalType;
   title: text;
   yay: nat;
 };
type Dao = 
 service {
   createProposal: (ProposalRequest) ->
    (variant {
       Err: TransferFromError;
       Ok: nat;
     });
   fetchProposals: () -> (vec Proposal);
   getProposal: (nat32) -> (variant {
                              Err: text;
                              Ok: Proposal;
                            });
   vote: (nat, nat32, bool) -> (variant {
                                  Err: TransferFromError;
                                  Ok: nat;
                                });
 };
service : () -> Dao
